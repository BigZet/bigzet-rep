m=transpose(k)
m
k
View(CovidSt[-1:-3])
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
View(tCovid)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid, make.names = rNames)
View(tCovid)
rNames
str(rNames)
unlist(rNames)
str(unlist(rNames))
str(unclass(rNames))
str(as.vector(rNames))
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
names(tCovid) = rNames
View(tCovid)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
names(as.vector(tCovid)) = rNames
View(tCovid)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=rNames
View(tCovid)
rNames
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=unlist(rNames)
View(tCovid)
daters = colnames(CovidSt)
unlist(rNames)
daters
daters = colnames(sbstCovidSt)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=unlist(rNames)
daters = colnames(sbstCovidSt)
View(tCovid)
daters = colnames(sbstCovid)
daters
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=unlist(rNames)
daters = colnames(sbstCovid)
tt = cbind(Date=daters, tCovid)
View(tt)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=unlist(rNames)
dates = colnames(sbstCovid)
tCovid = cbind(Date=dates, tCovid)
View(tCovid)
ISOdate(12, 12, 12)
ISOdate(2012, 12, 12)
toDate = function(x){
t=gsub("X", "", x)
t=strsplit(t, ".")
print(t)
}
Map(toDate, dates)
toDate = function(x){
t=gsub("X", "", x)
t=strsplit(t, ".")
}
Map(toDate, dates)
toDate = function(x){
t=gsub("X", "", x)
t=strsplit(t, ".")
}
Map(toDate, dates)
toDate = function(x){
print(x)
}
Map(toDate, 1:10)
toDate = function(x){
print(x)
}
Reduce(toDate, 1:10)
toDate = function(x){
print(x)
}
lapply(1:10, toDate)
toDate = function(x){
print(x)
}
tr=lapply(1:10, toDate)
toDate = function(x){
return(x)
}
unlist(lapply(1:10, toDate))
unlist(lappy(dates, toDate()))
toDate = function(x){
t=gsub("X", "", x)
t=strsplit(t, ".")
return(t)
}
unlist(lapply(dates, toDate))
dates = colnames(sbstCovid)
kk = dates %>% map(as.Date)
str(kk)
kk = dates %>% map(strsplit, split="." )
str(kk)
kk[1]
k[1]
dates[1]
strsplit(dates[1], ".")
strsplit(dates[1], split =".")
str_split(dates[1], split =".")
str_split(dates[1], ".")
str_split(dates[1], "\.")
strsplit(dates[1], split ="\.")
strsplit(dates[1], split ="[.]")
kk = dates %>% map(strsplit, split="[.]" )
str(kk)
kk[1]
kk = dates %>%
map(gsub, pattern="X", replacement="" )%>%
map(strsplit, split="[.]" )
str(kk[1])
kk = dates %>%
map(gsub, pattern="X", replacement="" )%>%
map(strsplit, split="[.]" )
str(kk[1])
lapply(kk, ISOdate, year=as.integer(x[1])+2000, month=as.integer(x[2]), day=as.integer(x[3]))
kk = dates %>%
map(gsub, pattern="X", replacement="" )%>%
map(strsplit, split="[.]" )
str(kk[1])
lapply(kk, ISOdate, year=as.integer(kk[1])+2000, month=as.integer(kk[2]), day=as.integer(kk[3]))
for (x in kk) {
x=ISOdate(as.integer(x[1])+2000, as.integer(x[2]), as.integer(x[3]))
}
for (x in kk) {
#x=ISOdate(as.integer(x[1])+2000, as.integer(x[2]), as.integer(x[3]))
print(x)
}
for (x in kk) {
x=ISOdate(as.integer(x[[1]][1])+2000, as.integer(x[[1]][2]), as.integer(x[[1]][3]))
print(x)
}
for (x in kk) {
x=ISOdate(as.integer(x[[1]][1])+2000, as.integer(x[[1]][2]), as.integer(x[[1]][3]))
#print(x)
}
x
kk
dates=vector(mode = "date")
dates=vector(mode = "any")
dates=list()
for (x in kk) {
dates=c(dates,ISOdate(as.integer(x[[1]][1])+2000, as.integer(x[[1]][2]), as.integer(x[[1]][3])))
}
dates
for (x in kk) {
print(ISOdate(as.integer(x[[1]][1])+2000, as.integer(x[[1]][2]), as.integer(x[[1]][3])))
}
str(kk)
for (x in kk) {
print(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2])))
}
dates=character(0)
for (x in kk) {
dates = c(dates, ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2])))
}
dates
dates[0]
dates[1]
print(dates[1])
dates=list()
for (x in kk) {
dates = c(dates, ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2])))
}
dates
dates=list()
for (x in kk) {
dates = c(dates, as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2]))))
}
dates
dates[[1]][1]
str(dates[[1]][1])
date2s=list()
for (x in kk) {
date2s = c(date2s, as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2]))))
}
date2s
for (x in kk) {
str(as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2])))))
}
for (x in kk) {
str(as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2]))))
}
str(kk[1])
for (x in kk) {
x[[1]]=str(as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2]))))
}
for (x in kk) {
x[[1]]=as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2])))
}
kk[1]
kk[[2]]
kk[[1]][[2]]
kk[[1]][2
]
kk
kk[[]][[2]]
kk[[1]][[2]]
str(kk)
for (x in kk) {
x=as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2])))
}
kk
for (x in kk) {
str(as.Date(ISOdate(as.integer(x[[1]][3])+2000, as.integer(x[[1]][1]), as.integer(x[[1]][2]))))
}
str(kk[1])
kk[[2]]
tCovid$Date
for (x in 1:nrow(kk)) {
tCovid$Date[x] = str(as.Date(ISOdate(as.integer(kk[[x]][3])+2000, as.integer(kk[[x]][1]), as.integer(kk[[x]][2]))))
}
nrow(kk)
str(kk)
length(kk)
for (x in 1:length(kk)) {
tCovid$Date[x] = str(as.Date(ISOdate(as.integer(kk[[x]][3])+2000, as.integer(kk[[x]][1]), as.integer(kk[[x]][2]))))
}
as.integer(kk[[x]][3]
)
kk[[2]][3]
for (x in 1:length(kk)) {
tCovid$Date[x] = str(as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))))
}
for (x in 1:length(kk)) {
tCovid$Date[x] = as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
View(tCovid)
tCovid$Date=character(0)
for (x in 1:length(kk)) {
tCovid$Date[x] = as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
tCovid$Date=character(0)
for (x in 1:length(kk)) {
tCovid$Date = c(tCovid$Date, as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))))
}
for (x in 1:length(kk)) {
tCovid$Date = c(tCovid$Date, as.character(as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))))
}
for (x in 1:length(kk)) {
tCovid$Date = c(tCovid$Date, as.character(as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))))
}
str(kk[1])
for (x in 1:length(kk)) {
tCovid$Date[x] =as.character(as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))))
}
View(tCovid)
for (x in 1:length(kk)) {
tCovid$Date[x] =as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
View(tCovid)
methods(class = "Date")
show(tCovid$Date[1])
as.character(tCovid$Date[1])
tCovid$Date[1]
tCovid$Date
as.Date.character("20/12/01")
as.Date.character("2020/12/01")
k=as.Date.character("2020/12/01")
k
class(k)
str(k)
vector()
vector(mode="Date")
date(5)
Date(5)
vector(5, mode = "Date" )
date(5)
vector(mode="Date")
tCovid$Date=vector(mode="list")
for (x in 1:length(kk)) {
tCovid$Date[x] =as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
tCovid$Date
tCovid$Date=vector(mode="list", nrow(tCovid))
for (x in 1:length(kk)) {
tCovid$Date[x] =as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
View(tCovid)
tCovid$Date
for (x in 1:length(kk)) {
print(as.Date(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))))
}
k=as.Date.character("2020/12/01")
k
k=vector(mode="list")
k[1]=as.Date.character("2020/12/01")
k
for (x in 1:length(kk)) {
print(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
for (x in 1:length(kk)) {
tCovid$Date[x] = ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))
}
View(tCovid)
for (x in 1:length(kk)) {
tCovid$Date[x] = as.character(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
#tCovid = cbind(Date=dates, tCovid)
View(tCovid)
for (x in 1:length(kk)) {
tCovid$Date[x] = ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))
}
#tCovid = cbind(Date=dates, tCovid)
View(tCovid)
mutate(tCovid, Date=as.Date(Date))
for (x in 1:length(kk)) {
tCovid$Dates[x] = ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))
}
#tCovid = cbind(Date=dates, tCovid)
View(tCovid)
mutate(tCovid, Date1=as.Date(Dates))
CovidSt = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
glimpse(CovidSt)
CovidSt = unite(CovidSt, "Country/Reg", names(CovidSt)[1], names(CovidSt)[2], sep = "/")
dfStat = CovidSt %>%
group_by(`Country/Reg`, Lat, Long) %>%
rowwise() %>%
transmute(sumx = sum(c_across(everything())), meanx = mean(c_across(everything())), sdx = sd(c_across(everything())))
View(dfStat)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=unlist(rNames)
dates = colnames(sbstCovid)
kk = dates %>%
map(gsub, pattern="X", replacement="" )%>%
map(strsplit, split="[.]" )
str(kk[1])
for (x in 1:length(kk)) {
tCovid$Dates[x] = ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2]))
}
#tCovid = cbind(Date=dates, tCovid)
View(tCovid)
View(tCovid)
tCovid$Dates
tCovid$Dates=as.Date(tCovid$Dates)
tCovid$Dates=as.Date(tCovid$Dates, origin = "1970-01-01")
tCovid$Dates
for (x in 1:length(kk)) {
tCovid$Dates[x] = as.character(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
tCovid$Dates
tCovid$Dates=as.Date(tCovid$Dates, origin = "1970-01-01")
tCovid$Dates
tCovid$Daters=as.Date(tCovid$Dates, origin = "1970-01-01")
tCovid$Daters
tCovid$Daters[1]
str(tCovid$Daters[1])
tCovid$Daters=NULL
tCovid$Daters
tCovid$Dates=as.Date(tCovid$Dates, origin = "1970-01-01")
View(tCovid)
tCovid %>% select("Date", .)
tCovid %>% select("Date", )
tCovid %>% select("Date", everything())
tCovid %>% select(Dates, )
tCovid %>% select(Dates, everything())
View(tCovid %>% select(Dates, everything()))
write.csv(tCovid, file = "/data_output/result.csv")
getwd()
getwd()+"/data_output"
paste0(getwd(), "/data_output")
write.csv(tCovid, file = paste0(getwd(), "/data_output/result.csv"))
write.csv(tCovid, file = paste0(getwd(), "/data_output/result.csv"),
traitsAsDir = TRUE)
write.csv(tCovid, file = paste0(getwd(), "/data_output/result.csv"))
write.csv(tCovid, file = paste0(getwd(), "/result.csv"))
mdir= paste0(getwd(), "/data_output")
if(!dir.exists(mdir)) dir.create(mdir)
mdir
if(!dir.exists(mdir)) dir.create(mdir)
write.csv(tCovid, file =paste0(mdir, "/result.csv"))
install.packages("xlsx")
write.csv(tCovid, file =paste0(mdir, "/result.csv"))
write.table(tCovid, file =paste0(mdir, "/result.txt"))
library("xlsx")
write.xlsx(tCovid, file =paste0(mdir, "/result.txt"))
write.xlsx(tCovid, file =paste0(mdir, "/result.xlsx"))
mdir= paste0(getwd(), "/data_output")
if(!dir.exists(mdir)) dir.create(mdir)
write.csv(tCovid, file =paste0(mdir, "/result.csv"))
write.table(tCovid, file =paste0(mdir, "/result.txt"))
library("xlsx")
write.xlsx(tCovid, file =paste0(mdir, "/result.xlsx"))
s
CovidSt = read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
glimpse(CovidSt)
CovidSt = unite(CovidSt, "Country/Reg", names(CovidSt)[1], names(CovidSt)[2], sep = "/")
dfStat = CovidSt %>%
group_by(`Country/Reg`, Lat, Long) %>%
rowwise() %>%
transmute(sumx = sum(c_across(everything())), meanx = mean(c_across(everything())), sdx = sd(c_across(everything())))
View(dfStat)
sbstCovid = CovidSt[-1:-3]
rNames = CovidSt[1]
tCovid = transpose(sbstCovid)
colnames(tCovid)=unlist(rNames)
dates = colnames(sbstCovid)
kk = dates %>%
map(gsub, pattern="X", replacement="" )%>%
map(strsplit, split="[.]" )
for (x in 1:length(kk)) {
tCovid$Dates[x] = as.character(ISOdate(as.integer(kk[[x]][[1]][3])+2000, as.integer(kk[[x]][[1]][1]), as.integer(kk[[x]][[1]][2])))
}
tCovid$Dates=as.Date(tCovid$Dates, origin = "1970-01-01")
tCovid = tCovid %>% select(Dates, everything())
mdir= paste0(getwd(), "/data_output")
if(!dir.exists(mdir)) dir.create(mdir)
write.csv(tCovid, file =paste0(mdir, "/result.csv"))
write.table(tCovid, file =paste0(mdir, "/result.txt"))
library("xlsx")
write.xlsx(tCovid, file =paste0(mdir, "/result.xlsx"))
k
#First part
#1st task
matrix = array(3, dim = c(3, 4))
indexes = cbind(c(1, 2, 3, 3), c(3, 1, 2, 4))
values = c(4, 1, NA, 1)
matrix[indexes] = values
print(matrix)
#2nd task
a <- c(1, 3, 4, 9, NA)
b <- c(5, 6, 7, 0, 2)
c <- c(9, 10, 13, 1, 20)
clmn = cbind(a, b, c)
rw = rbind(a, b, c)
rownames(rw) = paste0("row", 1:3)
colnames(rw) = paste0("col", 1:5)
print(clmn)
print(rw)
#3rd task
names <- c("Jane", "Michael", "Mary", "George")
ages <- c(8, 6, 28, 45)
gender <- c(0, 1, 0, 1)
cbind(names, ages, gender)
print("Матрица, как и вектор не может содержать данные различных типов")
#Second part
#solveMatrix
mat = diag(c(4, 9))
rownames(mat) = paste0("eq", 1:2)
colnames(mat) = paste0("x", 1:2)
print(eigen(mat)$values)
B = diag(1, 2, 2)-mat
print(B)
f = c(4, 2)
u = c(0.2, -0.3)
x=solve(mat)%*%f
u2=B%*%u+f
u3=B%*%u2+f
u4=B%*%u3+f
u5=B%*%u4+f
u6=B%*%u5+f
u7=B%*%u6+f
A = mat
AA = A/max(A)
ff = f/max(A)
eigen(AA)
f=ff
mat=AA
B = diag(1, 2, 2)-mat
x=solve(mat)%*%f
uu2=B%*%u+f
uu3=B%*%uu2+f
uu4=B%*%uu3+f
uu5=B%*%uu4+f
uu6=B%*%uu5+f
uu7=B%*%uu6+f
#slices_1
step <- 1               # Шаг сетки
dekart_begin <- -5      # Начало сетки
dekart_end <- 5         # Конец сетки
# Задание сеточной поверхности
x <- seq(from = dekart_begin, to = dekart_end, by = step)
y <- x
# Задание двумерной функции на координатной сетке
surface_matrix <- outer(X = x,
Y = y,
FUN = function(x,y) Re(exp(-1i * 0.5  * x * y)))
dimnames(surface_matrix) <- list(x, y)
cat("Количество элементов матрицы(", length(surface_matrix), ")\n",
"Размерность строк (", dim(surface_matrix)[1], ")\n",
"Размерность столбцов (", dim(surface_matrix)[2], ")\n",
"Сумма элементов главной диагонали(", sum(surface_matrix[cbind(1:11, 1:11)]), ")\n",
"Сумма элементов серединного среза матрицы по строкам(", sum(surface_matrix[median(1:11), ]), ")\n",
"Сумма элементов серединного среза матрицы по столбцам(", sum(surface_matrix[, median(1:11)]), ")\n",
"Сумма строк матрицы (", rowSums(surface_matrix) , ")\n",
"Сумма столбцов матрицы (", colSums(surface_matrix), ")\n", file = "summary.txt"
)
#slices_2
step <- readLines()               # Шаг сетки
